{% extends 'base.html.twig' %}
{% import 'Import/app_import.html.twig' as appImport %}

{% block head_title %}{{ 'subscriptions'|trans }}{% endblock %}

{% block heading_1 %}
    {{ appImport.heading({'level': 1, 'title': 'subscriptions'|trans}) }}
{% endblock %}

{% block tabs %}
    {% include 'Modules/subscription/subscription_tabs.html.twig' with {'active': 'list'} %}
{% endblock %}

{% block main_content %}
    <div class="jumbotron">
        <p class="lead">{{ 'subscriptions_note'|trans }}</p>
    </div>

    {% embed 'Embed/card_embed.html.twig' %}
        {% import 'Import/app_import.html.twig' as appImport %}
        {% block content %}
            {{ appImport.heading({'level': 3, 'title': 'list'|trans, 'badge': {'title': subscriptions|length}}) }}

            {% if 0 < subscriptions|length %}
                {% embed 'Embed/table_embed.html.twig' %}
                    {% import 'Import/app_import.html.twig' as appImport %}

                    {% block thead %}
                        <tr>
                            <th>{{ 'type'|trans }}</th>
                            <th>{{ 'os'|trans }}</th>
                            <th>{{ 'client'|trans }}</th>
                            <th class="d-none d-xl-table-cell">{{ 'ip'|trans }}</th>
                            <th>{{ 'notifications'|trans }}</th>
                            <th class="d-none d-xl-table-cell">{{ 'created_at'|trans }}{{ appImport.badge({'title': 'sort_desc'|trans, 'context': 'light'}) }}</th>
                            <th class="text-nowrap">&nbsp;</th>
                        </tr>
                    {% endblock %}

                    {% block tbody %}
                        {% for subscription in subscriptions %}
                            <tr>
                                <td>
                                    {{ ('subscription_' ~ subscription.type)|trans }}
                                </td>
                                <td>
                                    {{ subscription.os }}
                                </td>
                                <td>
                                    {{ subscription.client }}
                                </td>
                                <td class="d-none d-xl-table-cell">
                                    {{ subscription.ip }}
                                </td>
                                <td>
                                    {{ subscription.notifications|join(', ') }}
                                </td>
                                <td class="d-none d-xl-table-cell">
                                    {{ subscription.createdAt|human_datetime }}
                                </td>
                                <td class="text-nowrap actions">
                                    <a href="{{ path('app_subscriptions_update', {'id': subscription.id}) }}" class="btn btn-primary btn-sm">
                                        {{ 'update'|trans }}
                                    </a>

                                    {{ appImport.buttonModal({
                                        'id': 'SubscriptionDelete' ~ subscription.id,
                                        'title': 'delete'|trans,
                                        'body': ('subscription_' ~ subscription.type)|trans,
                                        'href': path('app_subscriptions_delete', {'id': subscription.id}),
                                    }) }}

                                    {% if 'push' == subscription.type %}
                                        <a data-endpoint="{{ subscription.endpoint }}" href="{{ path('app_subscriptions_delete', {'id': subscription.id}) }}" class="btn btn-primary btn-sm d-none unsubscribe-button">
                                            {{ 'unsubscribe'|trans }}
                                        </a>

                                        <a href="{{ path('app_subscriptions_test', {'id': subscription.id}) }}" class="btn btn-primary btn-sm test-notification-push">
                                            {{ 'test'|trans }}
                                        </a>
                                    {% endif %}
                                </td>
                            </tr>
                        {% endfor %}
                    {% endblock %}
                {% endembed %}
            {% endif %}
        {% endblock %}
    {% endembed %}
{% endblock %}

{% block scripts %}
    {{ parent() }}

    {% if applicationServerKey %}
    <script type="text/javascript">
        function deleteSubscription(url) {
            window.location.href = url;
        }

        function testNotification(url) {
            fetch(url, {
                credentials: 'include',
                method: 'GET',
                mode: 'cors',
            }).then(function(response) {
                return response.json();
            }).then(function(json) {
                if ('undefined' !== typeof json.message) {
                    createToast(json.message);
                } else {
                    createToast('Sent');
                }
            })
            .catch(function(error) {
                console.log(error);
            });
        }

        function getSubscription() {
            if (true == serviceWorkerEnabled) {
                navigator.serviceWorker.ready.then(function(ServiceWorkerRegistration) {
                    if ('pushManager' in ServiceWorkerRegistration) {
                        ServiceWorkerRegistration.pushManager.getSubscription()
                        .then(function(PushSubscription) {
                            if (PushSubscription && 'object' === typeof PushSubscription) {
                                $(document).find('.actions').each(function() {
                                    var deleteButton = $(this).find('.delete-button');
                                    var unsubscribeButton = $(this).find('.unsubscribe-button');
                                    if (PushSubscription.endpoint == unsubscribeButton.data('endpoint')) {
                                        unsubscribeButton.removeClass('d-none');
                                        deleteButton.addClass('d-none');
                                    }
                                });
                            }
                        });
                    }
                });
            }
        }

        function pushManagerUnsubscribe(url) {
            if (true == serviceWorkerEnabled) {
                navigator.serviceWorker.ready.then(function(ServiceWorkerRegistration) {
                    if ('pushManager' in ServiceWorkerRegistration) {
                        ServiceWorkerRegistration.pushManager.getSubscription()
                        .then(function(PushSubscription) {
                            if (PushSubscription && 'object' === typeof PushSubscription) {
                                PushSubscription.unsubscribe()
                                .then(function() {
                                    deleteSubscription(url);
                                })
                                .catch(function(error) {
                                    console.log(error);
                                });
                            }
                        });
                    }
                });
            }
        }

        $(document).ready(function() {
            getSubscription();

            $(document).on('click', '.unsubscribe-button', function(event) {
                event.preventDefault();
                pushManagerUnsubscribe($(this).attr('href'));
            });

            $(document).on('click', '.delete-button', function(event) {
                event.preventDefault();
                deleteSubscription($(this).attr('href'));
            });

            $(document).on('click', '.test-notification-push', function(event) {
                event.preventDefault();
                testNotification($(this).attr('href'));
            });
        });
    </script>
    {% endif %}
{% endblock %}
