{% extends 'base.html.twig' %}
{% import 'app_import.html.twig' as appImport %}

{% block head_title %}{{ 'nodes'|trans }}{% endblock %}

{% block heading_1 %}
    {{ appImport.heading({'level': 1, 'title': 'nodes'|trans}) }}
{% endblock %}

{% block tabs %}
    {% include 'Modules/nodes/nodes_tabs.html.twig' with {'active': 'list'} %}
{% endblock %}

{% block main_content %}
    {% if 0 < nodes.total %}
        {% embed 'card_embed.html.twig' %}
            {% import 'app_import.html.twig' as appImport %}
            {% block content %}
                {{ appImport.heading({'level': 3, 'title': 'list'|trans, 'badge': nodes.total}) }}

                <p>
                    <button class="btn btn-secondary btn-sm" type="button" data-toggle="collapse" data-target="#collapseFilter" aria-expanded="false" aria-controls="collapseFilter">
                        {{ 'filter'|trans }}
                    </button>
                </p>

                <div class="collapse" id="collapseFilter">
                    <p>
                        <label for="searchInput"><strong>{{ 'name'|trans }}</strong></label>
                        <input
                            id="searchInput"
                            class="form-control form-control-sm"
                            type="text"
                            autocomplete="off"
                        >
                    </p>

                    <p>
                        <strong>{{ 'master_eligible'|trans }}</strong><br>
                        {% for v in ['true', 'false'] %}
                            <span class="custom-control custom-switch d-inline mr-2">
                                <input
                                    type="checkbox"
                                    class="custom-control-input searchCheckbox"
                                    id="master_eligible{{ v }}Switch"
                                    checked="checked"
                                    value="master_eligible-{{ v }}"
                                >
                                <label class="custom-control-label" for="master_eligible{{ v }}Switch">{{ appImport.badge({'title': ('boolean.' ~ v)|trans, 'context': v}) }}</label>
                            </span>
                        {% endfor %}
                    </p>

                    <p>
                        <strong>{{ 'voting_only'|trans }}</strong><br>
                        {% for v in ['true', 'false'] %}
                            <span class="custom-control custom-switch d-inline mr-2">
                                <input
                                    type="checkbox"
                                    class="custom-control-input searchCheckbox"
                                    id="voting_only{{ v }}Switch"
                                    checked="checked"
                                    value="voting_only-{{ v }}"
                                >
                                <label class="custom-control-label" for="voting_only{{ v }}Switch">{{ appImport.badge({'title': ('boolean.' ~ v)|trans, 'context': v}) }}</label>
                            </span>
                        {% endfor %}
                    </p>

                    <p>
                        <strong>{{ 'data'|trans }}</strong><br>
                        {% for v in ['true', 'false'] %}
                            <span class="custom-control custom-switch d-inline mr-2">
                                <input
                                    type="checkbox"
                                    class="custom-control-input searchCheckbox"
                                    id="data{{ v }}Switch"
                                    checked="checked"
                                    value="data-{{ v }}"
                                >
                                <label class="custom-control-label" for="data{{ v }}Switch">{{ appImport.badge({'title': ('boolean.' ~ v)|trans, 'context': v}) }}</label>
                            </span>
                        {% endfor %}
                    </p>
                </div>

                {{ appImport.paginator(nodes) }}

                {% include 'Modules/nodes/nodes_list.html.twig' with {'nodes': nodes} %}

                {{ appImport.paginator(nodes) }}
            {% endblock %}
        {% endembed %}
    {% endif %}
{% endblock %}

{% block scripts %}
    {{ parent() }}

    <script type="text/javascript">
        {% if cluster_settings['cluster.routing.allocation.disk.threshold_enabled'] is defined and true == cluster_settings['cluster.routing.allocation.disk.threshold_enabled'] %}
            var disk_threshold_enabled = true;
            var disk_watermark_low = {{ cluster_settings['cluster.routing.allocation.disk.watermark.low']|replace({'%': ''}) }};
            var disk_watermark_high = {{ cluster_settings['cluster.routing.allocation.disk.watermark.high']|replace({'%': ''}) }};
            var disk_watermark_flood_stage = {{ cluster_settings['cluster.routing.allocation.disk.watermark.flood_stage']|replace({'%': ''}) }};
        {% else %}
            var disk_threshold_enabled = false;
        {% endif %}

        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
        function fetchNodes() {
            console.log('fetchNodes');
            fetch('{{ app.request.schemeAndHttpHost}}{{ app.request.baseUrl }}/admin/nodes/fetch', {
                credentials: 'include',
                method: 'get'
            }).then(function(response) {
                return response.json();
            }).then(async function(json) {
                for(var k in json) {
                    $('#' + k + '-uptime').text(json[k]['uptime']);

                    $('#' + k + '-os-cpu-percent').text(json[k]['stats']['os']['cpu']['percent']);
                    $('#' + k + '-process-cpu-percent').text(json[k]['stats']['process']['cpu']['percent']);

                    $('#' + k + '-heap-percent').text(json[k]['heap.percent']);
                    $('#' + k + '-heap-current').text(json[k]['heap.current']);
                    $('#' + k + '-heap-max').text(json[k]['heap.max']);

                    $('#' + k + '-ram-percent').text(json[k]['ram.percent']);
                    $('#' + k + '-ram-current').text(json[k]['ram.current']);
                    $('#' + k + '-ram-max').text(json[k]['ram.max']);

                    $('#' + k + '-disk-used_percent').text(json[k]['disk.used_percent']);
                    $('#' + k + '-disk-used').text(json[k]['disk.used']);
                    $('#' + k + '-disk-total').text(json[k]['disk.total']);

                    if (true == disk_threshold_enabled) {
                        $('#' + k + '-disk-watermark_low').addClass('d-none');
                        $('#' + k + '-disk-watermark_high').addClass('d-none');
                        $('#' + k + '-disk-watermark_flood_stage').addClass('d-none');

                        if (disk_watermark_flood_stage <= json[k]['disk.used_percent']) {
                            $('#' + k + '-disk-watermark_flood_stage').removeClass('d-none');

                        } else if (disk_watermark_high <= json[k]['disk.used_percent']) {
                            $('#' + k + '-disk-watermark_high').removeClass('d-none');

                        } else if (disk_watermark_low <= json[k]['disk.used_percent']) {
                            $('#' + k + '-disk-watermark_low').removeClass('d-none');
                        }
                    }
                }

                await sleep(5000);
                fetchNodes();
            }).catch(function() {
            });
        }
        fetchNodes();
    </script>
{% endblock %}
