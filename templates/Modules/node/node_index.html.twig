{% extends 'base.html.twig' %}
{% import 'Import/app_import.html.twig' as appImport %}

{% block head_title %}{{ 'nodes'|trans }}{% endblock %}

{% block heading_1 %}
    {{ appImport.heading({'level': 1, 'title': 'nodes'|trans}) }}
{% endblock %}

{% block tabs %}
    {% include 'Modules/node/node_tabs.html.twig' with {'active': 'list'} %}
{% endblock %}

{% block main_content %}
    {% if 0 < nodes.total %}
        {% embed 'Embed/card_embed.html.twig' %}
            {% import 'Import/app_import.html.twig' as appImport %}
            {% block content %}
                {{ appImport.heading({'level': 3, 'title': 'list'|trans, 'badge': {'title': nodes.total}}) }}

                {% embed 'Embed/buttons_embed.html.twig' %}
                    {% import 'Import/app_import.html.twig' as appImport %}
                    {% block content %}
                        <button class="btn btn-secondary btn-sm" type="button" data-toggle="collapse" data-target="#collapseFilter" aria-expanded="false" aria-controls="collapseFilter">
                            {{ 'filter'|trans }}
                        </button>
                    {% endblock %}
                {% endembed %}

                <div class="collapse" id="collapseFilter">
                    {{ appImport.filterText({'label': 'name'|trans}) }}

                    {{ appImport.filterCheckboxesBoolean({'title': 'master_eligible'|trans, 'prefix': 'master_eligible'}) }}

                    {{ appImport.filterCheckboxesBoolean({'title': 'voting_only'|trans, 'prefix': 'voting_only'}) }}

                    {{ appImport.filterCheckboxesBoolean({'title': 'data'|trans, 'prefix': 'data'}) }}
                </div>

                {{ appImport.paginator(nodes) }}

                {% include 'Modules/node/node_list.html.twig' with {'nodes': nodes} %}

                {{ appImport.paginator(nodes) }}
            {% endblock %}
        {% endembed %}
    {% endif %}
{% endblock %}

{% block scripts %}
    {{ parent() }}

    <script type="text/javascript">
        {% if cluster_settings['cluster.routing.allocation.disk.threshold_enabled'] is defined and 'true' == cluster_settings['cluster.routing.allocation.disk.threshold_enabled'] %}
            var disk_threshold_enabled = true;
            var disk_watermark_low = {{ cluster_settings['cluster.routing.allocation.disk.watermark.low']|replace({'%': ''}) }};
            var disk_watermark_high = {{ cluster_settings['cluster.routing.allocation.disk.watermark.high']|replace({'%': ''}) }};
            var disk_watermark_flood_stage = {{ cluster_settings['cluster.routing.allocation.disk.watermark.flood_stage']|replace({'%': ''}) }};
        {% else %}
            var disk_threshold_enabled = false;
        {% endif %}

        function humanFilesize(size) {
            var units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
            var step = 1024;
            var i = 0;
            while ((size / step) > 0.9) {
                size = size / step;
                i++;
            }
            size = Math.round(size * 100) / 100;
            return size + ' ' + units[i];
        }
        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
        function fetchNodes() {
            console.log('fetchNodes');
            fetch('{{ path('nodes_fetch') }}', {
                credentials: 'include',
                method: 'get'
            }).then(function(response) {
                return response.json();
            }).then(async function(json) {
                for(var k in json) {
                    $('#' + k + '-uptime').text(json[k]['uptime']);

                    $('#' + k + '-os-cpu-percent').text(json[k]['stats']['os']['cpu']['percent']);
                    $('#' + k + '-process-cpu-percent').text(json[k]['stats']['process']['cpu']['percent']);
                    $('#' + k + '-os-allocated_processors').text(json[k]['os']['allocated_processors']);

                    $('#' + k + '-heap-percent').text(json[k]['heap.percent']);
                    $('#' + k + '-heap-current').text(humanFilesize(json[k]['heap.current']));
                    $('#' + k + '-heap-max').text(humanFilesize(json[k]['heap.max']));

                    $('#' + k + '-ram-percent').text(json[k]['ram.percent']);
                    $('#' + k + '-ram-current').text(humanFilesize(json[k]['ram.current']));
                    $('#' + k + '-ram-max').text(humanFilesize(json[k]['ram.max']));

                    $('#' + k + '-disk-used_percent').text(json[k]['disk.used_percent']);
                    $('#' + k + '-disk-used').text(humanFilesize(json[k]['disk.used']));
                    $('#' + k + '-disk-total').text(humanFilesize(json[k]['disk.total']));

                    if (true == disk_threshold_enabled) {
                        $('#' + k + '-disk-watermark_low').addClass('d-none');
                        $('#' + k + '-disk-watermark_high').addClass('d-none');
                        $('#' + k + '-disk-watermark_flood_stage').addClass('d-none');

                        if (disk_watermark_flood_stage <= parseFloat(json[k]['disk.used_percent'])) {
                            $('#' + k + '-disk-watermark_flood_stage').removeClass('d-none');

                        } else if (disk_watermark_high <= parseFloat(json[k]['disk.used_percent'])) {
                            $('#' + k + '-disk-watermark_high').removeClass('d-none');

                        } else if (disk_watermark_low <= parseFloat(json[k]['disk.used_percent'])) {
                            $('#' + k + '-disk-watermark_low').removeClass('d-none');
                        }
                    }
                }

                await sleep(5000);
                fetchNodes();
            }).catch(function() {
            });
        }
        fetchNodes();
    </script>
{% endblock %}
